# This workflow will build a Mule project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Mule CICD with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: List target directory contents
      run: ls -l target/

    - name: Stamp artifact file name with commit hash
      run: |
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(echo "$artifactName1" | sed "s/.jar/.$commitHash.jar/")
        mv "$artifactName1" "$artifactName2"
        echo "Renamed artifact to: $artifactName2"

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: target/*.$(git rev-parse --short "$GITHUB_SHA").jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - uses: actions/download-artifact@v3
      with:
        name: artifacts

    - name: Deploy to cloudhub sandbox env
      env:
        anypointUsername: ${{ secrets.ANYPOINT_USERNAME }}
        anypointPassword: ${{ secrets.ANYPOINT_PASSWORD }}
      run: |
        artifactName=$(ls *.jar | head -1)
        echo "Deploying artifact: $artifactName"
        mvn deploy -DmuleDeploy -Dmule.artifact="$artifactName" -Danypoint.username="$anypointUsername" -Danypoint.password="$anypointPassword" -DworkerType=MICRO -Dworkers=1 -Dregion=Cloudhub-EU-Central-1 -Denvironment=SANDBOX -Dcloudhub.application.name=firstapp
